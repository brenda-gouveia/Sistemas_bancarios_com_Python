from abc import ABC, abstractmethod
import os
import re
import textwrap
from datetime import datetime, date, timedelta, timezone

class Banco:
    def __init__(self):
        self._clientes = []
        self._contas = []

    def adicionar_cliente(self, cliente):
        self._clientes.append(cliente)

    def criar_conta_corrente(self, cliente):
        self.adicionar_cliente(cliente)
        conta = ContaCorrente.nova_conta(cliente, str(self.numero).zfill(3))
        self._contas.append(conta)
        cliente.adicionar_conta(conta)

        return conta
    
    @property
    def numero(self):
        """
        Retorna o número total de contas no banco.
        """
        return len(self._contas)

    def buscar_cliente_por_cpf(self, cpf):
        return next((c for c in self._clientes if c._cpf == cpf), None)
        

    def buscar_conta_por_numero(self, numero):
        return next((c for c in self.contas if c._numero == numero), None)
    
class Transacao(ABC):
    @abstractmethod
    def registrar(self, conta):
        pass
class Deposito(Transacao):
    def __init__(self, valor):
        self._valor = valor
        self._data = datetime.now(timezone.utc)  # Horário de Brasília
    
    def __str__(self):
        data = self._data.astimezone(timezone(timedelta(hours=-3)))  # Convertendo para horário de Brasília
        d = data.strftime("%d/%m/%Y %H:%M:%S")
        return d + f" Depósito de R$ {self._valor:.2f}"

    def registrar(self, conta):
        conta._historico.adicionar_transacao(self)

class Saque(Transacao):
    def __init__(self, valor):
        self._valor = valor
        self._data = datetime.now(timezone.utc)  # Horário de Brasília

    def registrar(self, conta):
        conta._historico.adicionar_transacao(self)
    def __str__(self):
        data = self._data.astimezone(timezone(timedelta(hours=-3)))  # Convertendo para horário de Brasília
        d = data.strftime("%d/%m/%Y %H:%M:%S")
        return d + f" Saque de R$ {self._valor:.2f}"

class Conta():
    def __init__(self, numero, cliente, saldo = 0.0, agencia = '0001'): 
        self._saldo = saldo
        self._numero = numero
        self._agencia = agencia
        self._cliente = cliente
        self._historico = Historico()
    
    def __str__(self):
        cabecalho = textwrap.dedent("""
        ================ EXTRATO ================
        """)
        info = (
            f"Conta {self._numero} - Agência {self._agencia}\n\n"
            f"Cliente: {self._cliente.nome} - Saldo: R$ {self.saldo:.2f}\n\n"
            f"=========================================\n"
            f"Histórico de Transações:\n\n{self._historico}"
            f"\n=========================================\n"
        )
        return f"{cabecalho}{info}"

    @property
    def saldo(self):
        return self._saldo
    
    @classmethod
    def nova_conta(cls, cliente, numero):
        """
        Método de classe para criar uma nova conta.
        """
        if not isinstance(cliente, Cliente):
            raise TypeError("O cliente deve ser uma instância de Cliente.")
        return cls(numero=numero, cliente=cliente)
    
    
    def sacar(self, valor):
        """
        Método para sacar um valor da conta.
        """
        if valor > self.saldo:
            print("--- Saldo insuficiente para saque. ---")
            return False
        if valor > self._limite:
            print(f"--- Saque excede o limite de R$ {self._limite:.2f}. ---")
            return False
        if self._qtd_saques >= self._limite_saques:
            print(f"--- Limite de saques diários atingido ({self._limite_saques} saques). ---")
            return False
        
        self._saldo -= valor
        
        self._qtd_saques+= 1
        # print(f"--- Saque de R$ {valor:.2f} realizado com sucesso! Novo saldo: R$ {self.saldo:.2f} ---")

        return True
    def depositar(self, valor):
        """
        Método para depositar um valor na conta.
        """
        self._saldo += valor
        # print(f"--- Depósito realizado com sucesso! Novo saldo: R$ {self._saldo:.2f} ---")

        return True


class ContaCorrente(Conta):
    def __init__(self, limite = 1000, limite_saques = 3, **kwargs):
        self._limite = limite  # Limite padrão para conta corrente
        self._limite_saques = limite_saques
        self._qtd_saques = 0  # Contador de saques realizados
        super().__init__(**kwargs)

    

class Historico():
    def __init__(self):
        self._transacoes = []
    
    def __str__(self):
        """
        Retorna uma string representando o histórico de transações.
        """
        if not self._transacoes:
            return "Nenhuma transação registrada."
        return "\n".join(str(t) for t in self._transacoes)

    def adicionar_transacao(self, transacao):
        """
        Adiciona uma transação ao histórico.
        """
        if not isinstance(transacao, Transacao):
            raise TypeError("A transação deve ser uma instância de Transacao.")
        self._transacoes.append(transacao)

#########################################################
class Cliente():
    def __init__(self, endereco):
        self._endereco = endereco
        self._contas = []

    def realizar_transacao(self, conta, transacao):
        """
        Realiza uma transação na conta do cliente.
        """
        transacao.registrar(conta)

        if transacao.__class__.__name__ == "Deposito":
            return conta.depositar(transacao._valor)
        elif transacao.__class__.__name__ == "Saque":
            return conta.sacar(transacao._valor)

    @staticmethod
    def validar_endereco(endereco):
        """
        Verifica se o endereço informado pelo usuário é válido.

        O endereço é uma string com o formato "Logradouro, Numero - Bairro - Cidade/Estado".
        """
        if not isinstance(endereco, str):
            print("@@@ Endereço inválido. @@@")
            return False

        # Aceita endereços no formato "Logradouro, Numero - Bairro - Cidade/Estado"
        # Exemplo: "Rua das Flores, 123 - Centro - São Paulo/SP"
        partes = endereco.split(" - ")
        if len(partes) != 3:
            print("@@@ Endereço inválido. Formato esperado: 'Logradouro, Numero - Bairro - Cidade/Estado'. @@@")
            return False
        logradouro_numero, bairro, cidade_estado = partes
        if "," not in logradouro_numero or "/" not in cidade_estado:
            print("@@@ Endereço inválido. Certifique-se de usar vírgula e barra nos lugares corretos. @@@")
            return False
        return True
    
    def adicionar_conta(self, conta):
        """Adiciona uma conta ao cliente.
        """
        if isinstance(conta, Conta):
            self._contas.append(conta)
        else:
            raise TypeError("O objeto deve ser uma instância de Conta.")
        
    @property
    def qtd_contas(self):
        """Retorna a quantidade de contas do cliente.
        """
        return len(self._contas)
    
    def listar_contas(self):
        """Lista as contas do cliente.
        """
        if self.qtd_contas == 0:
            print("Nenhuma conta cadastrada.")
            return None
        elif self.qtd_contas == 1:
            return next((c for c in self._contas if c._cliente._cpf == cpf), None)
        else:
            for idx, conta in enumerate(self._contas, 1):
                print(f"{idx}. Número da conta: {conta.numero}")
        try:
            conta_selecionada = int(input("Selecione o número da conta que deseja operar: ")) - 1
        except ValueError:
            print("@@@ Entrada inválida. Por favor, digite um número. @@@")
            return None

        if 0 <= conta_selecionada < self.qtd_contas:
            conta = self._contas[conta_selecionada]
            print(f"Conta selecionada: {conta.numero}")
            return conta
        else:
            print("@@@ Número de conta inválido. Tente novamente. @@@")
        return None


class PessoaFisica(Cliente):
    def __init__(self, nome, cpf, data_nascimento, **kwargs):
        self._nome = nome
        self._cpf = cpf
        self._data_nascimento = data_nascimento
        super().__init__(**kwargs)
    
    @property
    def nome(self):
        return self._nome.split(' ')[0]  # Retorna apenas o primeiro nome

    @classmethod
    def criar_com_validacao(cls, nome, cpf, data_nascimento, banco,  endereco):
        if not cls.validar_cpf(cpf, banco):
            raise ValueError("CPF inválido")
        if not cls.validar_endereco(endereco):
            raise ValueError("Endereço inválido")
        
        data_nascimento = cls.validar_data_nascimento(data_nascimento)
        if not data_nascimento:
            raise ValueError("Data de nascimento inválida")
        
        return cls(nome, cpf, data_nascimento, endereco=endereco)

    @classmethod
    def validar_data_nascimento(cls, data_nascimento):
        """
        Valida a data de nascimento do cliente.
        Retorna a data de nascimento do cliente em formato datetime.
        """
        dia, mes, ano = map(int, data_nascimento.strip().split("/"))
        data_nascimento = date(ano, mes, dia)
        
        today = date.today()
        idade = today - data_nascimento

        if data_nascimento > today:
            print("@@@ Data de nascimento inválida. Deve ser uma data passada. @@@")
            return False
        if idade.days // 365 < 18:
            print("@@@ Cliente deve ter pelo menos 18 anos. @@@")
            return False
        return data_nascimento
        

    @staticmethod
    def validar_cpf(cpf, banco = None):
        """
        Verifica se o CPF informado pelo usuário é válido e retorna o CPF.
        """
        # cpf = input("Digite o CPF (apenas números): ").strip().replace(".", "").replace("-", "")
        if not cpf.isdigit() or len(cpf) != 11:
            print("@@@ CPF inválido. Deve conter 11 números. @@@")
            return None
        if banco is None:
            return cpf
        if banco.buscar_cliente_por_cpf(cpf):
            print("@@@ CPF já cadastrado. @@@")
            return None
        return cpf

#################### FUNÇÕES AUXILIARES #############################
def limpar_tela():
    """Limpa a tela do terminal."""
    os.system('cls' if os.name == 'nt' else 'clear')

def exibir_menu(texto):
    """
    Exibe um menu e retorna a opção escolhida pelo usuário.
    """
    return input(textwrap.dedent(texto))

def validar_valor():
    valor = float(input("Digite o valor:"))
    if valor <= 0:
        print("@@@ Valor inválido. O depósito deve ser maior que zero. @@@")
        return None
    return valor

def processar_transacao(cliente, conta, OperacaoClasse, mensagem_sucesso, mensagem_erro):
    valor = validar_valor()
    try:
        operacao = OperacaoClasse(valor)
        if not cliente.realizar_transacao(conta, operacao):
            raise ValueError(mensagem_erro)
        print(f"\n@@@ {mensagem_sucesso.format(valor=valor)} @@@")
    except Exception as e:
        print(f"@@@ Erro: {e} @@@")
############################# MAIN MENU #############################
if __name__ == "__main__":
    """Função principal que executa o sistema bancário.
    """
    menu_inicial = """

    Bem-vindo ao Banco DIO

    Você possui conta com a gente?
    [s] Sim
    [n] Não
    => """
    banco = Banco()

    while True:
        #################################### MENU INICIAL ####################################
        
        # Caso o usuário não tenha conta
        digito = exibir_menu(menu_inicial)


        if digito == "n":
            if input("Você será redirecionado para criar uma conta, pressione enter para continuar:") == "":
                try:
                    nome = input("Digite seu nome completo: ")  #"Ana da Silva"
                    cpf = input("Digite seu CPF (apenas números): ")#12345678901
                    data_nascimento = input("Digite sua data de nascimento (DD/MM/AAAA): ")#"01/01/2000"
                    endereco = input("Digite seu endereço: ")#"Rua das Flores, 123 - Centro - São Paulo/SP"

                    # Validação de CPF e criação do cliente
                    cliente = PessoaFisica.criar_com_validacao(nome, cpf, data_nascimento, banco, endereco)
                    conta = banco.criar_conta_corrente(cliente)

                except ValueError as e:
                    print(f"Erro ao criar conta: {e}")
            else:
                print("@@@ Operação cancelada, por favor tente novamente mais tarde @@@")
                continue
        #Caso o usuário já tenha conta    
        elif digito == "s":
            print("--- Ótimo, vamos começar a operar com sua conta ---")
        else:
            print("@@@ Opção inválida, por favor tente novamente @@@")
            continue
        
        ################################# AUTENTICACAO ##################################
        limpar_tela()

        menu_autenticacao = """
        ============== AUTENTICAÇÃO ==============
        Siga os próximos passos para logar em sua conta:
        """
        exibir_menu(menu_autenticacao)

        # Solicita o CPF do usuário
        cpf_usuario = PessoaFisica.validar_cpf(input("Digite seu CPF (apenas números): "))
        if not cpf_usuario: continue

        # Busca o cliente pelo CPF
        cliente = banco.buscar_cliente_por_cpf(cpf_usuario)
        if not cliente: continue

        conta = cliente.listar_contas()
        if not conta:
            print("@@@ Conta não encontrada. @@@")
            continue

        print(f"--- Bem-vindo(a) {cliente.nome}!---")
        input("Pressione Enter para continuar...")
        limpar_tela()
         ############################### MENU_OPERAÇOES ######################################################################

        ## Nesse ponto temos o usuário e a conta selecionada (cliente e conta)

        menu_op = """
    Selecione a operação desejada:

    [d] Depositar
    [s] Sacar
    [e] Extrato
    [q] Sair

    => """
        limpar_tela()
        opcao = exibir_menu(menu_op)

        if opcao == "d":
            processar_transacao(
                cliente,
                conta,
                Deposito,
                mensagem_sucesso="Depósito de R$ {valor} realizado com sucesso!",
                mensagem_erro="Erro ao realizar depósito."
                )
        elif opcao == "s":
            processar_transacao(
            cliente,
            conta,
            Saque,
            mensagem_sucesso="Saque de R${valor} realizado com sucesso!",
            mensagem_erro="Erro ao realizar saque."
            )
        elif opcao == "e":
            print(conta)
        elif opcao == "q":
            print("Saindo do sistema...")
            break
        print("\nAgradecemos por ter escolhido nosso banco, volte sempre!\n\n")
        input("Pressione Enter para continuar...")
        limpar_tela()

