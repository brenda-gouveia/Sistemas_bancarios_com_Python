
lista_usuarios = [
    {
        "nome": "Ana Silva",
        "cpf": "12345678901",
        "data_nascimento": "01/01/1990",
        "endereco": "Rua das Flores, 123",
        "qtd-conta": 1
    },
    {
        "nome": "Bruno Souza",
        "cpf": "98765432100",
        "data_nascimento": "15/05/1985",
        "endereco": "Av. Brasil, 456",
        "qtd-conta": 2
    }
]

lista_contas = [
    {
        "numero": "0001001",
        "cpf": "12345678901",
        "saldo": 1000,
        "limite": 500,
        "extrato": "",
        "numero_saques": 0
    },
    {
        "numero": "0001002",
        "cpf": "98765432100",
        "saldo": 500,
        "limite": 500,
        "extrato": "",
        "numero_saques": 0
    },
    {
        "numero": "0001003",
        "cpf": "98765432100",
        "saldo": 1500,
        "limite": 500,
        "extrato": "",
        "numero_saques": 0
    }
]

# Variável global para controlar o número de contas
n_contas = len(lista_contas)
LIMITE_SAQUES = 3

############################# CADASTRO DE USUÁRIOS E CONTAS ####################################

def cadastrar_conta(cpf):
    global n_contas
    n_contas += 1
    conta = {
        "numero": "0001" + str(n_contas).zfill(3),
        "cpf": cpf,
        "saldo": 0,
        "limite": 500,
        "extrato": "",
        "numero_saques": 0
    }
    lista_contas.append(conta)
    for usuario in lista_usuarios:
        if usuario['cpf'] == cpf:
            usuario['qtd-conta'] += 1
            print(f"Usuário {usuario['nome']} agora possui {usuario['qtd-conta']} conta(s).")
            break
    print(f"Conta cadastrada com sucesso! Número da conta: {conta['numero']}")

def cadastrar_usuario(nome, cpf, data_nascimento, endereco):
    global lista_usuarios
    usuario = {
        "nome": nome,
        "cpf": cpf,
        "data_nascimento": data_nascimento,
        "endereco": endereco,
        "qtd-conta": 0
    }
    lista_usuarios.append(usuario)
    print(f"Usuário {usuario['nome']} cadastrado com sucesso!")

    cadastrar_conta(cpf)

def criar_usuario():
    nome = input("Digite seu nome: ")
    cpf = input("Digite seu CPF, apenas números: ")
    data_nascimento = input("Digite sua data de nascimento (DD/MM/AAAA): ")
    endereco = input("Digite seu endereço: ")

    cadastrar_usuario(nome, cpf, data_nascimento, endereco)
################################### OPERACOES ###########################################################
def deposito(saldo, valor, extrato):
    saldo += valor
    extrato += f"Depósito: R$ {valor:.2f}\n"
    print(f"Depósito realizado com sucesso! Novo saldo: R$ {saldo:.2f}")
    
    return saldo, extrato
def saque(**kwargs):
    saldo = kwargs.get('saldo')
    saque = kwargs.get('saque')
    extrato = kwargs.get('extrato')

    
    saldo -= saque
    conta_usuario['numero_saques'] += 1
    extrato += f"Saque: {conta_usuario['numero_saques']} | Valor sacado : R$ {saque:0.2f} | Saldo final: R$ {saldo:0.2f}\n"

    print("Operação bem-sucedida, Obrigado por ter escolhido nosso banco")

    return saldo, extrato

def extrato(saldo,*, extrato):
    print('Extrato'.center(30,'*'))
    if extrato:
        print(extrato)
    else:
        print("Sem movimentações a mostrar !\n")
    
    print(f"{'Saldo Atual'.center(30,'*')}\n R$ {saldo:0.2f}\n")
    
        
###########################################################################################################
def entrada(mensagem):
    return input(mensagem)


menu_inicial = """
Bem-vindo ao Banco DIO

Você possui conta com a gente?
[s] Sim
[n] Não
=> """

while True:
    #################################### MENU INICIAL ####################################
    # Caso o usuário não tenha conta
    digito = input(menu_inicial)

    if digito == "n":
        if entrada("Você será redirecionado para criar uma conta, pressione enter para continuar:") == "":
            criar_usuario()
        else:
            print("Operação cancelada, por favor tente novamente mais tarde")
            continue
    #Caso o usuário já tenha conta    
    elif digito == "s":
        print("Ótimo, vamos começar a operar com sua conta")
    else:
        print("Opção inválida, por favor tente novamente")
        continue

    ####################################  AUTENTICACAO ##################################
    cpf_usuario = input("Digite seu CPF, apenas números: ")
    if cpf_usuario not in [usuario['cpf'] for usuario in lista_usuarios]:
        print("CPF não encontrado, por favor tente novamente")
        continue
    else:
        usuario_autenticado = next(usuario for usuario in lista_usuarios if usuario['cpf'] == cpf_usuario)
        print(f"Bem-vindo(a) {usuario_autenticado['nome']}!")


    #################################### SELECIONAR CONTA ##############################################
    qtd_contas = usuario_autenticado['qtd-conta']

    if qtd_contas == 0:
        print("Você não possui contas cadastradas. Por favor, crie uma conta primeiro.")
        cadastrar_conta(cpf_usuario)
        continue

    print(f"Você possui {qtd_contas} contas cadastradas. \n")

    # Se o usuário tiver apenas uma conta, seleciona automaticamente
    if qtd_contas == 1:
        conta_usuario = next(conta for conta in lista_contas if conta['cpf'] == cpf_usuario)
        print(f"Conta selecionada: {conta_usuario['numero']}")

    # Se o usuário tiver mais de uma conta, permite a seleção
    elif qtd_contas > 1:
        contas_usuario = []
        for conta in lista_contas:
            if conta['cpf'] == cpf_usuario:
                contas_usuario.append(conta)
        print("Contas encontradas para este CPF:")

        for idx, conta in enumerate(contas_usuario, 1):
            print(f"{idx}. Número da conta: {conta['numero']}")
        conta_selecionada = int(entrada("Selecione o número da conta que deseja operar: ")) - 1

        if 0 <= conta_selecionada < len(contas_usuario):
            conta_usuario = contas_usuario[conta_selecionada]
            print(f"Conta selecionada: {conta_usuario['numero']}")
        else:
            print("Número da conta inválido, por favor tente novamente.")
            continue


    ############################### MENU_OPERAÇOES ######################################################################

    menu_op = """
Selecione a operação desejada:

[d] Depositar
[s] Sacar
[e] Extrato
[q] Sair

=> """

    opcao = entrada(menu_op)

    if opcao == "d":
        valor = float(entrada("Digite o valor do seu depósito: "))
        
        try:
            if valor < 0:
                raise ValueError("Valor de depósito inválido.")
        except ValueError as e:
            print(e)
            continue    

        saldo,extrato = deposito(conta_usuario["saldo"], valor, conta_usuario['extrato'])
        conta_usuario['saldo'] = saldo
        conta_usuario['extrato'] = extrato

    elif opcao == "s":

        """Autorização de Saque """
        autorizacao_saque = conta_usuario['numero_saques'] < LIMITE_SAQUES and conta_usuario['saldo'] > 0
        try:
            if autorizacao_saque:
                saque = float(entrada("""Saque autorizado !!! Coloque o valor a ser sacado: """))
        except ValueError:
            print('Saque não autorizado !! Número de saques já atingiu o limite ou não possui saldo')
            continue
        try:
            if (saque > 0) or (saque <= 500 and saque <= saldo):
                saldo, extrato = saque(saldo=conta_usuario['saldo'], saque=saque, extrato=conta_usuario['extrato'])
                conta_usuario['numero_saques'] += 1
                conta_usuario['saldo'] = saldo
                conta_usuario['extrato'] = extrato         
        except ValueError:
            print("Valor excedeu o valor máximo a sacar ou não possui saldo o suficiente")
            continue

    elif opcao == "e":
        extrato(conta_usuario['saldo'], extrato=conta_usuario['extrato'])
    
    elif opcao == "q":
        break
    else:
        print("Operação inválida, por favor selecione novamente a operação desejada.")